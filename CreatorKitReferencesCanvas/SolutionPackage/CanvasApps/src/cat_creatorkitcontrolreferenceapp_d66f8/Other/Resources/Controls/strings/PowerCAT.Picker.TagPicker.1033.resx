<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Picker" xml:space="preserve">
    <value>Fluent Picker (1.0.6-beta)</value>
    <comment/>
  </data>
  <data name="Picker_Desc" xml:space="preserve">
    <value>Allows picking string tags from one dataset and adding to another</value>
    <comment/>
  </data>
  <data name="TagMaxWidth" xml:space="preserve">
    <value>Tag max width</value>
    <comment/>
  </data>
  <data name="TagMaxWidth_Desc" xml:space="preserve">
    <value>The maximum width that tags can grow to before the text is truncated</value>
    <comment/>
  </data>
  <data name="SearchTermToShortMessage" xml:space="preserve">
    <value>Search term to short message</value>
    <comment/>
  </data>
  <data name="SearchTermToShortMessage_Desc" xml:space="preserve">
    <value>The message to display if the search term is less than the 'Minimum Search Term Length' parameter - e.g. 'Keep typing'</value>
    <comment/>
  </data>
  <data name="NoSuggestionFoundMessage" xml:space="preserve">
    <value>No suggestion found message</value>
    <comment/>
  </data>
  <data name="NoSuggestionFoundMessage_Desc" xml:space="preserve">
    <value>The message to display when no suggestions match the search term</value>
    <comment/>
  </data>
  <data name="MinimumSearchTermLength" xml:space="preserve">
    <value>Minimum search term length</value>
    <comment/>
  </data>
  <data name="MinimumSearchTermLength_Desc" xml:space="preserve">
    <value>The minimum number of characters that must be entered before a suggestion search is performed</value>
    <comment/>
  </data>
  <data name="MaxTags" xml:space="preserve">
    <value>Max tags</value>
    <comment/>
  </data>
  <data name="MaxTags_Desc" xml:space="preserve">
    <value>The maximum number of tags that can be added</value>
    <comment/>
  </data>
  <data name="TagDisplayName" xml:space="preserve">
    <value>Tag display name</value>
    <comment/>
  </data>
  <data name="TagDisplayName_Desc" xml:space="preserve">
    <value>The name of the tag aded or removed</value>
    <comment/>
  </data>
  <data name="TagEvent" xml:space="preserve">
    <value>Tag event</value>
    <comment/>
  </data>
  <data name="TagEvent_Desc" xml:space="preserve">
    <value>The type of event raised (Add/Remove)</value>
    <comment/>
  </data>
  <data name="TagKey" xml:space="preserve">
    <value>Tag key</value>
    <comment/>
  </data>
  <data name="TagKey_Desc" xml:space="preserve">
    <value>The key of the tag that raise the event</value>
    <comment/>
  </data>
  <data name="SearchTerm" xml:space="preserve">
    <value>Search term</value>
    <comment/>
  </data>
  <data name="SearchTerm_Desc" xml:space="preserve">
    <value>The search term entered that should be used when filtering suggestions</value>
    <comment/>
  </data>
  <data name="Tags" xml:space="preserve">
    <value>Tags</value>
    <comment/>
  </data>
  <data name="TagsKey" xml:space="preserve">
    <value>Tags key</value>
    <comment/>
  </data>
  <data name="TagsDisplayName" xml:space="preserve">
    <value>Tags display name</value>
    <comment/>
  </data>
  <data name="TagsDisplayName_Desc" xml:space="preserve">
    <value>The column to use as the tag display name</value>
    <comment/>
  </data>
  <data name="Suggestions" xml:space="preserve">
    <value>Suggestions</value>
    <comment/>
  </data>
  <data name="SuggestionDisplayName" xml:space="preserve">
    <value>Suggestion display name</value>
    <comment/>
  </data>
  <data name="SuggestionDisplayName_Desc" xml:space="preserve">
    <value>The column to use as the suggestions line 1</value>
    <comment/>
  </data>
  <data name="SuggestionSubDisplayName" xml:space="preserve">
    <value>Suggestion sub display name</value>
    <comment/>
  </data>
  <data name="SuggestionSubDisplayName_Desc" xml:space="preserve">
    <value>The column to use as the suggestions line 2</value>
    <comment/>
  </data>
  <data name="InputEvent" xml:space="preserve">
    <value>Input event</value>
    <comment/>
  </data>
  <data name="InputEvent_Desc" xml:space="preserve">
    <value>Signals an event - add a random element to make each event unique</value>
    <comment/>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
    <comment/>
  </data>
  <data name="Error_Desc" xml:space="preserve">
    <value>True if the control is in an error state</value>
    <comment/>
  </data>
  <data name="AutoHeight" xml:space="preserve">
    <value>Auto height</value>
    <comment/>
  </data>
  <data name="AutoHeight_Desc" xml:space="preserve">
    <value>The height that the control grows to when the tags do not fit the width available</value>
    <comment/>
  </data>
  <data name="AccessibilityLabel" xml:space="preserve">
    <value>Accessibility label</value>
    <comment/>
  </data>
  <data name="AccessibilityLabel_Desc" xml:space="preserve">
    <value>The label to add to the table aria description</value>
    <comment/>
  </data>
  <data name="TagError" xml:space="preserve">
    <value>Tag error</value>
    <comment/>
  </data>
  <data name="TagError_Desc" xml:space="preserve">
    <value>Set to true to indicate an error on the added tag</value>
    <comment/>
  </data>
  <data name="HintText" xml:space="preserve">
    <value>Hint text</value>
    <comment/>
  </data>
  <data name="HintText_Desc" xml:space="preserve">
    <value>The text to display when no text input is provided</value>
    <comment/>
  </data>
  <data name="AllowFreeText" xml:space="preserve">
    <value>Allow free text</value>
    <comment/>
  </data>
  <data name="AllowFreeText_Desc" xml:space="preserve">
    <value>'Allow free text mode' allows freetext entry with resolving to a suggestion</value>
    <comment/>
  </data>
  <data name="Theme" xml:space="preserve">
    <value>Theme</value>
    <comment/>
  </data>
  <data name="FontSize" xml:space="preserve">
    <value>Font size</value>
    <comment/>
  </data>
  <data name="BorderRadius" xml:space="preserve">
    <value>Border radius</value>
    <comment/>
  </data>
  <data name="ItemHeight" xml:space="preserve">
    <value>Item height</value>
    <comment/>
  </data>
  <data name="Aria_TagRemove" xml:space="preserve">
    <value>Remove</value>
    <comment/>
  </data>
</root>